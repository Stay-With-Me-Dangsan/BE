name: Build and Deploy Java Application

on:
  push:
    branches:
      - master  # master 브랜치에 푸시될 때 실행

jobs:
  build:
    runs-on: ubuntu-latest  # 빌드를 진행할 OS

    permissions:
      contents: read
      packages: write

    steps:
      # 1. 리포지토리 체크아웃
      - uses: actions/checkout@v4

      # 2. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      # 4. Gradle로 빌드
      - name: Build with Gradle
        run: ./gradlew build --no-daemon --refresh-dependencies --stacktrace || (echo "Gradle build failed!" && exit 1)

      - name: Check if JAR file is created
        run: |
          ls -al ${{ github.workspace }}/build/libs/

      - name: Find JAR file
        run: |
          echo "Searching for JAR files..."
          find /home/runner/work/BE/BE/ -name "*.jar" | tee jar_files.log
          echo "JAR files found:"
          cat jar_files.log

      # 5. JAR 파일 EC2로 복사
      - name: Upload JAR file to EC2
        run: |
          echo "Uploading JAR file to EC2"
          scp -i ${{ secrets.EC2_PRIVATE_KEY }} /home/runner/work/BE/BE/build/libs/stay-with-me-1.0.0-plain.jar ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/apps/stay-with-me/stay-with-me.jar

      # 6. EC2에서 애플리케이션 실행
      - name: SSH into EC2 and run the app
        run: |
          ssh -i ${{ secrets.EC2_PRIVATE_KEY }} ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # 실행 중인 프로세스 종료
            PID=\$(pgrep -f 'stay-with-me.jar')
            if [ ! -z "\$PID" ]; then
              echo "Stopping existing application (PID: \$PID)"
              kill -9 \$PID
            fi

            # JAR 실행 (백그라운드 실행)
            nohup java -jar /apps/stay-with-me/stay-with-me.jar > /apps/stay-with-me/app.log 2>&1 &
            echo "Application deployed and running."
          EOF
