<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--suppress ALL -->
<mapper namespace="stay.with.me.api.model.mapper.UserMapper">
    <resultMap id="userResultMap" type="stay.with.me.api.model.dto.UserDto">
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="nickname" column="nickname"/>
        <result property="gender" column="gender"/>
        <result property="birth" column="birth"/>
    </resultMap>
    <insert id="signUp" parameterType="stay.with.me.api.model.dto.UserDto">
        INSERT INTO USERS
        (
        email,
        password,
        nickname,
        gender,
        birth,
        provider,
        created_date
        )
        VALUES
        (
        #{email},
        #{password},
        #{nickname},
        #{gender},
        #{birth},
        'local',
        #{createdDate}::date
        )
    </insert>

    <insert id="OauthSingUp" parameterType="stay.with.me.api.model.dto.UserDto">
        INSERT INTO social_account (email, password, nickname, provider, provider_id, refreshToken, created_date)
        VALUES (#{email},'SOCIAL_User','SOCIAL_nickname', #{provider}, #{providerId}, #{refreshToken},  NOW())
    </insert>


    <select id="saveOauthUser" parameterType="stay.with.me.api.model.dto.UserDto">
        INSERT INTO USERS
        (
        email,
        password,
        nickname,
        gender,
        birth

        )
        VALUES
        (
        #{email},
        #{password},
        'null',
        'null',
        'null'
        )
    </select>

    <!--    이메일로 유저 찾기-->
    <select id="findByEmail" resultType="stay.with.me.api.model.dto.UserDto">
        SELECT * FROM USERS
        WHERE email = #{email}
        AND provider = 'local'
    </select>

    <!--아이디로 유저 찾기-->
    <select id="findById" resultType="stay.with.me.api.model.dto.UserDto">
        SELECT * FROM USERS
        WHERE user_id = #{userId}
    </select>

    <!--    이메일 찾기(닉네임,생일)-->
    <select id="findEmail" resultType="stay.with.me.api.model.dto.UserDto">
        SELECT email FROM USERS WHERE nickname = #{nickname} AND birth = #{birth}
    </select>
    <!--닉네임 중복체크-->
    <select id="isNickNameDuplicated" parameterType="stay.with.me.api.model.dto.UserDto" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM USERS
        WHERE nickname = #{nickname}
    </select>

    <select id="findOauthByEmail" parameterType="String" resultType="stay.with.me.api.model.dto.UserDto">
        SELECT * FROM USERS WHERE email = #{email} AND provider_id = #{providerId}
    </select>

    <!--비밀번호 임시 업데이트-->
    <update id="updateTempPassword">
        UPDATE USERS
        SET password = #{password}
        WHERE email = #{email}
    </update>

<!-- 회원정보중 닉네임만 수정-->
    <update id="updateNickname" parameterType="UserDto">
        UPDATE USERS
        SET nickname = #{nickname}
        WHERE user_id = #{userId}
    </update>
<!--    회원정보중 이메일,비밀번호 수정-->
    <update id="updateMypage" parameterType="UserDto">
        UPDATE users
        <set>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="password != null">
                password = #{password}
            </if>
        </set>
        WHERE user_id = #{userId}
    </update>

    <!--리프레시토큰 저장 및 업데이트-->
    <update id="SaveOrUpdateRefreshToken" parameterType="stay.with.me.api.model.dto.UserDto">
        UPDATE USERS
        SET user_id = #{userId},
        refresh_token = #{refreshToken},
        rt_expired_date =  now()
        WHERE user_id = #{userId}
    </update>


    <update id="updateSocialLogin" parameterType="map">
        UPDATE USERS
        SET provider = #{provider}, provider_id = #{providerId}
        WHERE user_id = #{userId}
    </update>
    <!--리프레쉬토큰 삭제-->
    <delete id="deleteRefreshToken" parameterType="Long">
        DELETE FROM USERS
        WHERE user_id = #{userId}
    </delete>
    <!--계정 삭제-->


</mapper>