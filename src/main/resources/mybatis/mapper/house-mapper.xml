<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="stay.with.me.api.model.mapper.HouseMapper">
    <resultMap id="houseDetailResultMap" type="stay.with.me.api.model.dto.HouseDetailDto">
        <result property="houseDetailId" column="house_detail_id" />
        <result property="houseMainId" column="house_main_id" />
        <result property="houseDetailAddress" column="house_detail_address" />
        <result property="houseDescription" column="house_description" />
        <result property="housePhone" column="house_phone" />
        <result property="propertyType" column="property_type" />
        <result property="houseDeposit" column="house_deposit" />
        <result property="houseRent" column="house_rent" />
        <result property="houseKeyword" column="house_keyword" typeHandler="stay.with.me.spring.mybatis.StringArrayTypeHandler"/>
        <result property="houseFeatures" column="house_features" typeHandler="stay.with.me.spring.mybatis.StringArrayTypeHandler"/>
        <result property="shareStartDate" column="share_start_date" />
        <result property="shareEndDate" column="share_end_date" />
        <result property="coordinates" column="coordinates" typeHandler="stay.with.me.spring.mybatis.PGPointTypeHandler" />
        <result property="createdBy" column="created_by" />
        <result property="houseFilePath" column="house_file_path"/>
    </resultMap>
    <resultMap id="ClusterWithHousesMap" type="stay.with.me.api.model.dto.ClusterWithHousesDto">
        <result property="lat" column="lat" />
        <result property="lng" column="lng" />
        <result property="count" column="count" />
        <result property="precision" column="precision"/>
        <collection
                property="houses"
                ofType="stay.with.me.api.model.dto.HouseDetailDto"
                select="getHousesByRoundedLocation"
                column="{lat=lat, lng=lng, precision=precision}" />
    </resultMap>

    <select id="getHousesByRoundedLocation" resultType="stay.with.me.api.model.dto.HouseDetailDto">
        SELECT hd.*,
               hf.house_file_path
        FROM house_detail hd
                 LEFT JOIN house_file hf ON hd.house_detail_id = hf.house_detail_id
        WHERE ROUND(coordinates[0]::numeric, #{precision}) = #{lng}
          AND ROUND(coordinates[1]::numeric, #{precision}) = #{lat}
    </select>


    <select id="getMain" parameterType="int" resultType="stay.with.me.api.model.dto.HouseMainDto">
        SELECT *
        FROM house_main
        WHERE house_main_id = #{houseMainId}
    </select>

    <select id="getDetail" parameterType="int" resultMap="houseDetailResultMap">
        SELECT *
        FROM house_detail
        WHERE house_detail_id = #{houseDetailId}
    </select>

    <select id="getDetails" parameterType="double" resultMap="houseDetailResultMap">
        SELECT *
        FROM house_detail
        WHERE coordinates <![CDATA[ <@ ]]> BOX(POINT(#{minX}, #{minY}), POINT(#{maxX}, #{maxY}))
    </select>

    <select id="getDetailsByCondition" resultMap="ClusterWithHousesMap">
        WITH rounded_house AS (
        SELECT
        ROUND(coordinates[0]::numeric, #{precision}) AS lng,
        ROUND(coordinates[1]::numeric, #{precision}) AS lat,
        #{precision} AS precision,
        house_deposit,
        house_rent,
        property_type,
        gender_type,
        contract_start_date,
        contract_end_date
        FROM house_detail
        WHERE 1 = 1

        <!-- 지도 영역 필터 -->
        <if test="minX != null and maxX != null and minX != 0.0 and maxX != 0.0">
            AND coordinates[0] BETWEEN #{minX} AND #{maxX}
            AND coordinates[1] BETWEEN #{minY} AND #{maxY}
        </if>

        <!-- 보증금 -->
        <if test="depositRange != null and depositRange.size == 2">
            AND house_deposit BETWEEN #{depositRange[0]} AND #{depositRange[1]}
        </if>

        <!-- 월세 -->
        <if test="monthlyRentRange != null and monthlyRentRange.size == 2">
            AND house_rent BETWEEN #{monthlyRentRange[0]} AND #{monthlyRentRange[1]}
        </if>

        <!-- 공간유형 -->
        <if test="spaceType != null and spaceType.size() > 0">
            AND space_type IN
            <foreach item="type" collection="spaceType" open="(" separator="," close=")">
                #{type}
            </foreach>
        </if>

        <!-- 성별 -->
        <if test="genderType != null and genderType != ''">
            AND gender_type =  #{genderType}
        </if>

        <!-- 입주 시작일 이후 -->
        <if test="shareStartDate != null">
            AND share_start_date &gt;= #{shareStartDate}
        </if>

        <!-- 입주 종료일 이전 -->
        <if test="shareEndDate != null">
            AND share_end_date &lt;= #{shareEndDate}
        </if>

<!--        &lt;!&ndash; 계약기간 &ndash;&gt;-->
<!--        <if test="contractPeriod != null and contractPeriod.minYear != null and contractPeriod.minYear != ''">-->
<!--            AND EXTRACT(YEAR FROM contract_start_date) &gt;= #{contractPeriod.minYear}-->
<!--        </if>-->
<!--        <if test="contractPeriod != null and contractPeriod.maxYear != null and contractPeriod.maxYear != ''">-->
<!--            AND EXTRACT(YEAR FROM contract_end_date) &lt;= #{contractPeriod.maxYear}-->
<!--        </if>-->
<!--        )-->
    )
        SELECT
        lng,
        lat,
        precision,
        COUNT(*) AS count
        FROM rounded_house
        GROUP BY lng, lat, precision
        ORDER BY count DESC
    </select>

    <select id="getMainClusterWithHouses" parameterType="int" resultType="stay.with.me.api.model.dto.ClusterWithHousesDto">
        SELECT
            lng,
            lat,
            #{precision} AS precision,
        COUNT(*) AS count
        FROM (
            SELECT
            ROUND(coordinates[0]::numeric, #{precision}) AS lng,
            ROUND(coordinates[1]::numeric, #{precision}) AS lat
            FROM house_detail
            ) AS rounded
        GROUP BY lng, lat, precision
        ORDER BY count DESC
    </select>


    <select id="getClusterWithHouses" resultMap="ClusterWithHousesMap">
        SELECT
            lng,
            lat,
            #{precision} AS precision,
        COUNT(*) AS count
        FROM (
            SELECT
            ROUND(coordinates[0]::numeric, #{precision}) AS lng,
            ROUND(coordinates[1]::numeric, #{precision}) AS lat
            FROM house_detail
            ) AS rounded
        GROUP BY lng, lat, precision
        ORDER BY count DESC
    </select>

    <update id="updateDetail" useGeneratedKeys="true" keyProperty="houseDetailId">
        UPDATE house_detail
        <set>
            <if test="houseDetailAddress != null">
                house_detail_address = #{houseDetailAddress},
            </if>
            <if test="houseDescription != null">
                house_description = #{houseDescription},
            </if>
            <if test="housePhone != null">
                house_phone = #{housePhone},
            </if>
            <if test="houseKeyword != null and houseKeyword.length > 0">
                house_keyword = ARRAY[<foreach collection="houseKeyword" item="houseKeyword" separator=",">#{houseKeyword, jdbcType=VARCHAR}</foreach>],
            </if>
            <if test="houseFeatures != null and houseFeatures.length > 0">
                house_features = ARRAY[<foreach collection="houseFeatures" item="houseFeatures" separator=",">#{houseFeatures, jdbcType=VARCHAR}</foreach>],
            </if>
            <if test="propertyType != null">
                property_type = #{propertyType},
            </if>
            <if test="houseDeposit != null and houseDeposit != 0">
                house_deposit = #{houseDeposit},
            </if>
            <if test="houseRent != null and houseRent != 0">
                house_rent = #{houseRent},
            </if>
            <if test="shareStartDate != null">
                share_start_date = #{shareStartDate}::date,
            </if>
            <if test="shareEndDate != null">
                share_end_date = #{shareEndDate}::date,
            </if>
            <if test="coordinates != null">
                coordinates = #{coordinates, typeHandler=stay.with.me.spring.mybatis.PGPointTypeHandler}
            </if>
        </set>
        WHERE house_detail_id = #{houseDetailId}
    </update>

    <insert id="createMain" parameterType="stay.with.me.api.model.dto.HouseMainDto">
        INSERT INTO house_main
        (
        house_main_id,
        house_address,
        house_zonecode,
        house_name
        )
        values
        (
        #{houseMainId},
        #{houseAddress},
        #{houseZonecode},
        #{houseName}
        )
    </insert>

    <insert id="createDetail" parameterType="stay.with.me.api.model.dto.HouseDetailDto">
        INSERT INTO house_detail
        (
        house_main_id,
        house_detail_address,
        house_description,
        house_phone,
        house_keyword,
        house_features,
        property_type,
        house_deposit,
        house_rent,
        share_start_date,
        share_end_date,
        coordinates,
        created_by,
        created_at
        )
        VALUES
        (
        #{houseMainId},
        #{houseDetailAddress},
        #{houseDescription},
        #{housePhone},
        #{houseKeyword, jdbcType=ARRAY, typeHandler=stay.with.me.spring.mybatis.StringArrayTypeHandler},
        #{houseFeatures, jdbcType=ARRAY, typeHandler=stay.with.me.spring.mybatis.StringArrayTypeHandler},
        #{propertyType},
        #{houseDeposit},
        #{houseRent},
        #{shareStartDate}::date,
        #{shareEndDate}::date,
        #{coordinates, typeHandler=stay.with.me.spring.mybatis.PGPointTypeHandler},
        #{createdBy},
        CURRENT_TIMESTAMP
        )
    </insert>

    <insert id="createFile" parameterType="stay.with.me.api.model.dto.HouseFileDto">
        INSERT INTO house_file
        (
        house_detail_id,
        house_file_name,
        house_file_path,
        house_file_width,
        house_file_height,
        house_file_extension,
        created_by,
        created_at
        )
        values
        (
        #{houseDetailId},
        #{houseFileName},
        #{houseFilePath},
        #{houseFileWidth},
        #{houseFileHeight},
        #{houseFileExtension},
        #{createdBy},
        CURRENT_TIMESTAMP
        )
    </insert>

    <delete id="deleteDetail" parameterType="int">
        DELETE FROM house_detail
        WHERE house_detail_id = #{houseDetailId}
    </delete>





    <select id="getHousesByUserId">
        SELECT hd.*,
               hf.house_file_path
        FROM house_detail hd
                 LEFT JOIN house_file hf ON hd.house_detail_id = hf.house_detail_id
        WHERE user_id = #{userId}
            LIMIT 10;
    </select>
<select id="getMarkedHouse">
    SELECT hd.*,
           hf.house_file_path
    FROM house_detail hd
             JOIN house_bookmark hb ON hb.house_detail_id = hd.house_detail_id
             JOIN house_file hf ON hd.house_detail_id = hf.house_detail_id
    WHERE hb.user_id =  #{userId}
    ;

</select>

    <insert id="plusBookMark" parameterType="map">
        INSERT INTO house_bookmark (user_id, house_detail_id, liked_at)
        VALUES (#{userId}, #{houseDetailId}, NOW())
    </insert>

    <delete id="minusBookMart" parameterType="int">
        DELETE FROM house_bookmark
        WHERE user_id = #{userId}
          AND house_detail_id = #{houseDetailId}
    </delete>


<select id="getRecentView">
    SELECT hd.*,
           hf.house_file_path
    FROM house_detail hd
             JOIN house_view_history hvh ON hvh.house_detail_id = hd.house_detail_id
             JOIN house_file hf ON hd.house_detail_id = hf.house_detail_id
    WHERE hvh.user_id = #{userId}
    ORDER BY hvh.viewed_at DESC
        LIMIT 10;

</select>

</mapper>